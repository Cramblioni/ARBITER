set c 0 # for counting how many times the event `ready` is invoked#

ref a [ # create a model called `a` #
	get a a # gets the value of variable a from the arbiter and assigns it to local var a #
	get b b # again but with b #
	set c 0 # sets variable c to 0. this wont overwrite the previously defined c #
	invoke ready ~ # invokes the event `ready` in the Arbiter scope #
	await go # waits until it hears the event `go` #
	while a > 0 [
		set c c + b
		set a a - 1
	]
	ext set p1 c # sets the variable `p1` in the arbiter to the value of c #
	end # terminates the process #
]

ref b [
	get a b
	get b a
	# same as with reference `a` but with the variables `a` and `b` swapped #
	set c 0
	invoke ready ~
	await go
	while a > 0 [
		set c c + b
		set a a - 1
	]
	ext set p2 c
	end
]

event ready [ # defines an event response for the event `ready` #
	set c c + 1 # increments c #
	if c = 2 [ invoke go ] # invokes the event `go` once the event is called twice # 
]

set a 10 # this is what the processes will be pulling in #
set b 2
create a # creates a process that executes the code in reference `a` #
create b # the same but with reference `b` #
end